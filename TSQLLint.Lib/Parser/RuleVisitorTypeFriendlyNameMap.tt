<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)TSQLLint.Lib.Standard.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="TSQLLint.Lib.Standard.Rules.Interface"#>
<#@ output extension=".cs" debug="true"#>
/*
  This file is auto-generated and should not be edited directly.
  All changes should be made to the accompanying template.
*/

using System;
using System.Collections.Generic;

namespace TSQLLint.Lib.Parser
{
    public static class RuleVisitorFriendlyNameTypeMap
    {
        // a list of all classes that implement ISqlRule
        public static readonly Dictionary<string, Type> List = new Dictionary<string, Type>
        {
<#
        var type = typeof(ISqlRule);
        var types = AppDomain.CurrentDomain.GetAssemblies()
            .SelectMany(s => s.GetTypes())
            .Where(p => type.IsAssignableFrom(p) && p.IsClass);

        foreach (var ruleType in types)
        {
            Action<string, string, int, int> foo = null;
            var typeInstance = (ISqlRule)Activator.CreateInstance(ruleType, foo);
            var friendlyName = typeInstance.RULE_NAME;

#>
            { "<#= friendlyName #>", typeof(<#= ruleType #>) },
<#
        }#>
        };
    }
}
